// COMPLETE WORKING SOLUTION FOR OrderEntryPanel.cpp

// Constructor
OrderEntryPanel::OrderEntryPanel(std::shared_ptr<POSService> posService,
                                std::shared_ptr<EventManager> eventManager)
    : posService_(posService), eventManager_(eventManager),
      tableNumberEdit_(nullptr), newOrderButton_(nullptr),
      sendToKitchenButton_(nullptr), processPaymentButton_(nullptr),
      menuDisplay_(nullptr), currentOrderDisplay_(nullptr) {
    
    initializeUI();
}

// Complete initializeUI implementation
void OrderEntryPanel::initializeUI() {
    addStyleClass("order-entry-panel h-100");
    
    // Create main vertical layout
    auto mainLayout = std::make_unique<Wt::WVBoxLayout>();
    mainLayout->setContentsMargins(10, 10, 10, 10);
    
    // 1. Table Selection Section
    auto tableSection = std::make_unique<Wt::WContainerWidget>();
    tableSection->addStyleClass("table-selection-section mb-3 p-3 border rounded bg-light");
    
    auto tableLayout = std::make_unique<Wt::WHBoxLayout>();
    
    auto tableLabel = std::make_unique<Wt::WText>("Table Number:");
    tableLabel->addStyleClass("form-label me-2");
    tableLayout->addWidget(std::move(tableLabel));
    
    auto tableEdit = std::make_unique<Wt::WSpinBox>();
    tableEdit->setRange(1, 99);
    tableEdit->setValue(1);
    tableEdit->addStyleClass("form-control");
    tableEdit->setWidth(80);
    tableNumberEdit_ = tableEdit.get(); // Store pointer
    tableLayout->addWidget(std::move(tableEdit)); // Move to layout
    
    tableSection->setLayout(std::move(tableLayout));
    mainLayout->addWidget(std::move(tableSection));
    
    // 2. Order Action Buttons
    auto actionsSection = std::make_unique<Wt::WContainerWidget>();
    actionsSection->addStyleClass("order-actions-section mb-3");
    
    auto actionsLayout = std::make_unique<Wt::WVBoxLayout>();
    
    // New Order Button
    auto newOrderBtn = std::make_unique<Wt::WPushButton>("Start New Order");
    newOrderBtn->addStyleClass("btn btn-primary mb-2 w-100");
    newOrderButton_ = newOrderBtn.get();
    actionsLayout->addWidget(std::move(newOrderBtn));
    
    // Send to Kitchen Button
    auto sendBtn = std::make_unique<Wt::WPushButton>("Send to Kitchen");
    sendBtn->addStyleClass("btn btn-warning mb-2 w-100");
    sendBtn->setEnabled(false);
    sendToKitchenButton_ = sendBtn.get();
    actionsLayout->addWidget(std::move(sendBtn));
    
    // Process Payment Button
    auto paymentBtn = std::make_unique<Wt::WPushButton>("Process Payment");
    paymentBtn->addStyleClass("btn btn-success w-100");
    paymentBtn->setEnabled(false);
    processPaymentButton_ = paymentBtn.get();
    actionsLayout->addWidget(std::move(paymentBtn));
    
    actionsSection->setLayout(std::move(actionsLayout));
    mainLayout->addWidget(std::move(actionsSection));
    
    // 3. Menu Display
    auto menuContainer = std::make_unique<Wt::WContainerWidget>();
    menuContainer->addStyleClass("menu-container mb-3");
    
    auto menuDisplay = std::make_unique<MenuDisplay>(posService_, eventManager_);
    menuDisplay_ = menuDisplay.get(); // Store pointer for access
    menuContainer->addWidget(std::move(menuDisplay)); // Move to container
    
    mainLayout->addWidget(std::move(menuContainer));
    
    // 4. Current Order Display
    auto orderContainer = std::make_unique<Wt::WContainerWidget>();
    orderContainer->addStyleClass("current-order-container");
    
    auto currentOrderDisplay = std::make_unique<CurrentOrderDisplay>(posService_, eventManager_);
    currentOrderDisplay->setEditable(true);
    currentOrderDisplay_ = currentOrderDisplay.get(); // Store pointer for access
    orderContainer->addWidget(std::move(currentOrderDisplay)); // Move to container
    
    mainLayout->addWidget(std::move(orderContainer));
    
    // Set the main layout
    setLayout(std::move(mainLayout));
    
    // Setup event handlers after UI is created
    setupEventHandlers();
}

// Event handlers setup
void OrderEntryPanel::setupEventHandlers() {
    // Table number change handler
    if (tableNumberEdit_) {
        tableNumberEdit_->changed().connect([this]() {
            onTableNumberChanged();
        });
    }
    
    // Button click handlers
    if (newOrderButton_) {
        newOrderButton_->clicked().connect([this]() {
            onNewOrderClicked();
        });
    }
    
    if (sendToKitchenButton_) {
        sendToKitchenButton_->clicked().connect([this]() {
            onSendToKitchenClicked();
        });
    }
    
    if (processPaymentButton_) {
        processPaymentButton_->clicked().connect([this]() {
            onProcessPaymentClicked();
        });
    }
    
    // Subscribe to business events
    if (eventManager_) {
        auto orderCreatedHandle = eventManager_->subscribe(POSEvents::ORDER_CREATED,
            [this](const std::any& data) { handleOrderCreated(data); });
        eventSubscriptions_.push_back(orderCreatedHandle);
        
        auto orderModifiedHandle = eventManager_->subscribe(POSEvents::ORDER_MODIFIED,
            [this](const std::any& data) { handleOrderModified(data); });
        eventSubscriptions_.push_back(orderModifiedHandle);
    }
}

// Action handlers
void OrderEntryPanel::onNewOrderClicked() {
    if (!posService_) return;
    
    try {
        int tableNumber = getTableNumber();
        auto order = posService_->createOrder(tableNumber);
        
        if (order) {
            posService_->setCurrentOrder(order);
            updateOrderActionButtons();
            
            // Refresh displays
            refresh();
        }
    } catch (const std::exception& e) {
        showOrderValidationError("Failed to create new order: " + std::string(e.what()));
    }
}

void OrderEntryPanel::onSendToKitchenClicked() {
    if (!posService_ || !hasCurrentOrder()) {
        showOrderValidationError("No current order to send to kitchen");
        return;
    }
    
    try {
        bool success = posService_->sendCurrentOrderToKitchen();
        
        if (success) {
            updateOrderActionButtons();
            refresh();
        } else {
            showOrderValidationError("Failed to send order to kitchen");
        }
    } catch (const std::exception& e) {
        showOrderValidationError("Error sending to kitchen: " + std::string(e.what()));
    }
}

void OrderEntryPanel::onProcessPaymentClicked() {
    if (!posService_ || !hasCurrentOrder()) {
        showOrderValidationError("No current order to process payment for");
        return;
    }
    
    // This would typically open a payment dialog
    // For now, just validate that we have an order
    auto currentOrder = posService_->getCurrentOrder();
    if (currentOrder && currentOrder->getItems().empty()) {
        showOrderValidationError("Cannot process payment for empty order");
        return;
    }
    
    // TODO: Implement payment processing UI
}

void OrderEntryPanel::onTableNumberChanged() {
    // Could update current order table number or validate table availability
    updateOrderActionButtons();
}

// Helper methods
int OrderEntryPanel::getTableNumber() const {
    return tableNumberEdit_ ? tableNumberEdit_->value() : 1;
}

void OrderEntryPanel::setTableNumber(int tableNumber) {
    if (tableNumberEdit_) {
        tableNumberEdit_->setValue(tableNumber);
    }
}

bool OrderEntryPanel::hasCurrentOrder() const {
    return posService_ && posService_->getCurrentOrder() != nullptr;
}

void OrderEntryPanel::updateOrderActionButtons() {
    bool hasOrder = hasCurrentOrder();
    bool hasItems = false;
    
    if (hasOrder) {
        auto order = posService_->getCurrentOrder();
        hasItems = order && !order->getItems().empty();
    }
    
    if (sendToKitchenButton_) {
        sendToKitchenButton_->setEnabled(hasItems);
    }
    
    if (processPaymentButton_) {
        processPaymentButton_->setEnabled(hasItems);
    }
}

void OrderEntryPanel::refresh() {
    if (menuDisplay_) {
        menuDisplay_->refresh();
    }
    
    if (currentOrderDisplay_) {
        currentOrderDisplay_->refresh();
    }
    
    updateOrderActionButtons();
}

void OrderEntryPanel::showOrderValidationError(const std::string& message) {
    // Could show a popup, notification, or status message
    // For now, just log to console
    std::cerr << "Order validation error: " << message << std::endl;
    
    // TODO: Integrate with notification system
}

// Event handlers
void OrderEntryPanel::handleOrderCreated(const std::any& eventData) {
    updateOrderActionButtons();
    refresh();
}

void OrderEntryPanel::handleOrderModified(const std::any& eventData) {
    updateOrderActionButtons();
    if (currentOrderDisplay_) {
        currentOrderDisplay_->refresh();
    }
}