#ifndef DOCROOTCONFIG_HPP
#define DOCROOTCONFIG_HPP

/**
 * @file DocRootConfig.hpp
 * @brief Auto-generated configuration for asset paths
 * 
 * This file is automatically generated by CMake and contains
 * the correct paths for CSS, images, and other assets.
 * 
 * DO NOT EDIT THIS FILE MANUALLY - Edit DocRootConfig.hpp.in instead
 */

#include <string>

namespace Config {
    
    /**
     * @brief Base document root directory
     */
    const std::string DOCROOT_PATH = "@WT_DOCROOT@";
    
    /**
     * @brief Assets base directory
     */
    const std::string ASSETS_PATH = "@WT_DOCROOT@/assets";
    
    /**
     * @brief CSS assets directory
     */
    const std::string CSS_PATH = "@WT_DOCROOT@/assets/css";
    
    /**
     * @brief Theme CSS directory
     */
    const std::string THEMES_PATH = "@WT_DOCROOT@/assets/css/themes";
    
    /**
     * @brief Component CSS directory
     */
    const std::string COMPONENTS_PATH = "@WT_DOCROOT@/assets/css/components";
    
    /**
     * @brief Available theme files
     */
    namespace Themes {
        const std::string LIGHT_THEME = "assets/css/themes/light-theme.css";
        const std::string DARK_THEME = "assets/css/themes/dark-theme.css";
        const std::string WARM_THEME = "assets/css/themes/warm-theme.css";
        const std::string COOL_THEME = "assets/css/themes/cool-theme.css";
        const std::string BASE_THEME = "assets/css/theme-framework.css";
    }
    
    /**
     * @brief Component CSS files
     */
    namespace Components {
        const std::string POS_COMPONENTS = "assets/css/components/pos-components.css";
        const std::string KITCHEN_COMPONENTS = "assets/css/components/kitchen-components.css";
        const std::string COMMON_COMPONENTS = "assets/css/components/common-components.css";
    }
    
    /**
     * @brief Framework CSS files
     */
    namespace Framework {
        const std::string RESPONSIVE = "assets/css/responsive.css";
        const std::string THEME_FRAMEWORK = "assets/css/theme-framework.css";
    }
    
    /**
     * @brief Helper function to get full asset path
     * @param relativePath Relative path from docroot
     * @return Full filesystem path
     */
    inline std::string getAssetPath(const std::string& relativePath) {
        return DOCROOT_PATH + "/" + relativePath;
    }
    
    /**
     * @brief Helper function to get web-accessible asset URL
     * @param relativePath Relative path from docroot
     * @return Web URL for the asset
     */
    inline std::string getAssetURL(const std::string& relativePath) {
        return "/" + relativePath;  // Relative to web root
    }
}

#endif // DOCROOTCONFIG_HPP
